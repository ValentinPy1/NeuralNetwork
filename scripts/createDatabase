#!/usr/bin/env python3

import sys
import chess
import random
from correct_file import process_file

def generate_random_game(board, max_moves=100):
    """Generates a random game with a higher chance of stalemate."""
    for _ in range(max_moves):
        if board.is_game_over(claim_draw=False):
            break
        moves = list(board.legal_moves)
        if random.random() < 0.15:  # Introduce a chance to simplify the position
            non_king_squares = [square for square in chess.SQUARES if board.piece_at(square) and board.piece_at(square).piece_type != chess.KING]
            if non_king_squares:
                board.remove_piece_at(random.choice(non_king_squares))
        elif moves:
            move = random.choice(moves)
            board.push(move)

def determine_game_state(board):
    """Determines the game state of the given board."""
    if board.is_checkmate():
        return [1, 0, 0, 0], 'checkmate'
    elif board.is_check():
        return [0, 1, 0, 0], 'check'
    elif board.is_stalemate():
        return [0, 0, 1, 0], 'stalemate'
    else:
        return [0, 0, 0, 1], 'continue'

def main():
    if ((len(sys.argv) != 2) or (len(sys.argv) == 2) and ((sys.argv[1] == '-h') or (sys.argv[1] == '--help')) ):
        print("./createDabatabase FileName")
        exit(0)
    max_positions = 400
    max_per_state = 100
    with open(str(sys.argv[1]), 'w') as file:
        while True:
            state_counts = {'checkmate': 0, 'check': 0, 'stalemate': 0, 'continue': 0}
            total = 0
            while total < max_positions:
                board = chess.Board()
                generate_random_game(board)
                state, state_name = determine_game_state(board)

                if state_counts[state_name] < max_per_state:
                    file.write(f"{board.fen()}|{state}\n")
                    state_counts[state_name] += 1
                    total += 1

if __name__ == "__main__":
    main()
