#!/usr/bin/env python3

import pickle as pkl
import sys
from Sources.DataLoader import Data

usage = """
Usage: ./trainer <model> <dataset> <epochs>
    -s <split> (default: 0.9)
        split the dataset into a training set and a validation set
    -b <batch_size> (default: 64)
    -l <learning_rate> (default: 0.001)
    -e <early_stop> (default: 0)
        stop training if test accuracy does not improve for <early_stop> epochs
    -v (verbose)
        print loss and accuracy after each epoch
    -p (progress bar)
        show progression during an epoch
"""

def main(argv):
    if len(argv) < 4:
        print(usage)
        sys.exit(1)
    model_file = argv[1]
    dataset = argv[2]
    epochs = int(argv[3])
    split = 0.9
    batch_size = 64
    learning_rate = 0.001
    early_stop = 0
    verbose = False
    for i in range(4, len(argv)):
        if argv[i] == '-s':
            split = float(argv[i+1])
        elif argv[i] == '-b':
            batch_size = int(argv[i+1])
        elif argv[i] == '-l':
            learning_rate = float(argv[i+1])
        elif argv[i] == '-e':
            early_stop = int(argv[i+1])
        elif argv[i] == '-v':
            verbose = True
        elif argv[i] == '-p':
            progress_bar = True
    data = Data()
    data.load(dataset, 'data')
    data.split('data', split, 'train', 'test')
    x_train, y_train = data.get('train')
    x_test, y_test = data.get('test')
    print(f'Training set: {x_train.shape[0]} samples')
    print(f'Test set: {x_test.shape[0]} samples')
    print()
    with open(model_file, 'rb') as file:
        model = pkl.load(file)
    print(f'Loading model from "{model_file}"...')
    acc = model.test_accuracy(x_test, y_test)
    print(f'Initial accuracy: {acc}')
    print()
    print("Training...")
    model.train(x_train, y_train, x_test, y_test, epochs, batch_size, learning_rate, early_stop, verbose)
    model.save(model_file)

if __name__ == '__main__':
    main(sys.argv)